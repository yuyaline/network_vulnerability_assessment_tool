from base64 import decode, encode
from cmath import e
from email import header
from http import client
import socket
import subprocess
import netifaces
import telnetlib
import re
import PySimpleGUI as sg
import os
from scapy.all import ARP,Ether,srp
import time
import threading


FLAG = None
KRACK_CHECK = "?"
REC = "cant detected"
IP = ""
MAC = ""
SCAN = ""
NMAP = ""
SSH = ""


# IPを取得


def getIP():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    return s.getsockname()[0]

# デフォルトゲートウェイを取得


def getGatewayIP():
    gw = netifaces.gateways()
    return gw["default"][2][0] + "/24"

# 無線LAN情報の表示

def getRouterIP():
    router_ip = netifaces.gateways()
    return router_ip["default"][2][0]


def checkLan():
    rec = subprocess.run(
        ["sudo","wpa_cli","-i" ,"wlx1cc03504484f" ,"status"], capture_output=True)
    return rec.stdout.decode("cp932")

def router_check():
    rec = checkCrypted(checkLan())
    return rec


# 無線LANに接続されている機器の表示

def network():
    global SCAN
    rec = ""
    clients = []
    target_IP = getGatewayIP()
    #create ARP packets
    arp = ARP(pdst=target_IP)
    #create the Ether bradcast packets
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    #stack them
    packet = ether/arp
    result = srp(packet,timeout=3)[0]
    for sent,received in result:
        clients.append({"ip":received.psrc,"mac":received.hwsrc})
    #print clients
    for client in clients:
        rec += "{:16}    {}".format(client["ip"],client["mac"]) + "\n"
    SCAN = "無線LAN内の機器\n" + "IP" + " "*28+"MAC\n"+ rec
    #return SCAN
    return clients

def network_device():
    clients = network()
    rec = ""
    a = []
    b = []
    for ip ,mac in zip(extractIP(),extractMAC()):
        if ip == getRouterIP():
            rec += f"無線LANルータ情報\nIPアドレス:{ip}\nMACアドレス:{mac}\nVendor:{getVendor(mac)}"
            continue
        b = [ip,mac,getVendor(mac)]
        a.append(b)
    
    return a,rec

def getVendor(mac):
    vendor = ""
    try:
        vendor = MacLookup().lookup(mac)
    except Exception as e:
        vendor =  "Not Found"
    return vendor


def scan():
    pas = "kali\n".encode()
    rec = subprocess.run([
         "sudo" ,"nmap", "-sP", getGatewayIP()], capture_output=True,input=pas)
    global NMAP 
    NMAP = rec.stdout.decode("cp932")
    return rec.stdout.decode("cp932")

# 無線LANの暗号化規格の確認


def checkCrypted():
    if "pairwise_cipher=CCMP" in checkLan():
        return "暗号化規格:WPA2\n暗号化方式:CCMP\nお使いの無線LANルーターは比較的安全ですが,WPA3への変更を推奨します"
    elif "暗号化規格:WPA2\npairwise_cipher=TKIP" in checkLan():
        return "暗号化規格をAES(CCMP)に変更することを推奨します"
    else:
        return "お使いの無線LANルーターの暗号化規格は危険です"

# 入力したIPアドレスのポートスキャン


def portScan(ip):
    rec = subprocess.run(["sudo", "nmap", ip], capture_output=True)
    return rec.stdout.decode("cp932")


def extractIP():
    ip = re.findall(
        "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", SCAN)
    if getIP() in IP:
        IP.remove(getIP())
    return ip


def extractMAC():
    mac = re.findall(
        "(?:[0-9a-fA-F]:?){12}", SCAN)
    return mac

def is_ssh_open(ip):
    rec = False
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    result = sock.connect_ex((ip,22))
    if result == 0:
        rec = True
    return rec

def is_telnet_open(ip):
    rec = False
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    result = sock.connect_ex((ip,23))
    if result == 0:
        rec = True
    return rec


def ssh_Crack(ip):
    flag = False
    rec = subprocess.run(["hydra","-L","./user.txt","-P","./password.txt","-t","4",ip,"ssh"],capture_output=True)
    #rec = subprocess.run(["hydra","-L","./checkFunction/mirai_usr.lst","-P","./checkFunction/mirai_pass.lst","-t","4",ip,"ssh"],capture_output=True)
    target_IP_Scan =  rec.stdout.decode("cp932")
    if "successfully completed" in target_IP_Scan:
        flag = True
    return flag
            

def telnet_Crack(ip):
    flag = False
    rec = subprocess.run(["hydra","-L","./user.txt","-P","./password.txt","-t","4",ip,"telnet"],capture_output=True)
    #rec = subprocess.run(["hydra","-L","./checkFunction/mirai_usr.lst","-P","./checkFunction/mirai_pass.lst","-t","4",ip,"ssh"],capture_output=True)
    target_IP_Scan =  rec.stdout.decode("cp932")
    if "successfully completed" in target_IP_Scan:
        flag = True
    return flag


def ssh_check(ip):
    rec = ""
    if is_ssh_open(ip)[0]:
        if ssh_Crack(ip):
            rec += ip
            return "×"
        else:
            return "○"
    else:
        return "○"

def telnet_check(ip):
    if is_telnet_open(ip):
        if telnet_Crack(ip):
            return "×"
        else:
            return "○"
    else:
        return "ー"

def check_ssh(ip):
    if is_ssh_open(ip):
        if ssh_Crack(ip):
            return "×"
        else:
            return "○"
    else:
        return "ー"



def check_telnet(ip):
    rec = ""
    if is_telnet_open(ip):
        if telnet_Crack(ip):
            rec += ip
            return "×"
        else:
            return "○"
    else:
        return "ー"


def vulnerability_Result():
    a = []
    b = []
    for ip ,mac in zip(extractIP(),extractMAC()):
        if ip == getRouterIP():
            b = [ip,mac,check_ssh(ip),check_telnet(ip),"ー"]
        else:
            b = [ip,mac,check_ssh(ip),check_telnet(ip),krack_check(mac)]
        a.append(b)
    
    return a

def sendDeauth(mac):
    subprocess.run(["/usr/sbin/aireplay-ng", "--deauth","10", "--ignore-negative-one", "-a", "58:27:8C:4C:E0:5E", "-c" ,mac, "monwlx0022cff41"])



def krack_script():
    rec = ""
    global FLAG,KRACK_CHECK,REC
    #os.chdir("./krackattacks-scripts/krackattack")

    try:
        rec = subprocess.run(["./krackattacks-scripts/krackattack/krack-test-client.py"],capture_output=True,timeout=80)
    except subprocess.TimeoutExpired as e:
        print("detected error")
        FRAG = None
        return None

    result = rec.stdout.decode("cp932")
    print(result)
    
    if "client DOESN'T reinstall the pairwise key in the 4-way handshake" in result:
        #clinet not krack false
        print("not KRACK")
        FLAG =  False
        KRACK_CHECK = "○"
    elif "Client reinstalls the pairwise key in the 4-way handshake (this is bad)" in result:
        FLAG =  True
        KRACK_CHECK = "×"
    else:
        FLAG = None
        KRACK_CHECK = "?"
    print(KRACK_CHECK)
    print(FLAG)
    
def multi_thread(mac):
    #print(mac)
    t1 = threading.Thread(target=krack_script)
    t2 = threading.Thread(target=sendDeauth,args=(mac,))

    print("AP enable")
    t1.start()
    time.sleep(10)
    print("Send DeauthFrame")
    sendDeauth(mac)
    t2.start()
    time.sleep(60)
    print("stop Krack_Check")

def krack_check(mac):
    global FLAG,KRACK_CHECK
    print("start Krack_Check")
    multi_thread(mac)
    return KRACK_CHECK
    






print(telnet_Crack("192.168.11.5"))