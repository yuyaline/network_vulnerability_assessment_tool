import threading
import time
import subprocess

class KRACKCheck:
    def __init__(self):
        self.target_ip = ""
        self.vulnerable = "Unknown"

    def set_target_ip(self, ip):
        self.target_ip = ip

    def send_deauthentication(self):
        # Deauthenticationフレームの送信コード
        subprocess.run(["/usr/sbin/aireplay-ng", "--deauth","10", "--ignore-negative-one", "-a", "58:27:8C:4C:E0:5E", "-c" ,"44:17:93:10:2b:cc", "monwlx0022cff41"])

        

    def run_krack_tool(self):
        # KRACKツールの実行コード
        result = subprocess.run(["/home/yuya/network_vulnerability_assessment_tool/external/krackattacks-scripts/krackattack/krack-test-client.py"])
      
        # 結果の解析
        if "Client reinstalls the pairwise key in the 4-way handshake (this is bad)" in result.stdout.decode():
            self.vulnerable = "Vulnerable"
        elif "client DOESN'T reinstall the pairwise key in the 4-way handshake" in result.stdout.decode():
            self.vulnerable = "Secure"
    

    def check_vulnerability(self):
        # a. KRACKツールの起動
        krack_tool_thread = threading.Thread(target=self.run_krack_tool)
        krack_tool_thread.start()

        # aを実行後10秒待機
        time.sleep(10)

        # b. Deauthenticationフレームの送信
        deauth_thread = threading.Thread(target=self.send_deauthentication)
        deauth_thread.start()

        # その後60秒間待機
        time.sleep(60)

        # KRACKツールスレッドとDeauthenticationスレッドの終了を待つ
        krack_tool_thread.join()
        deauth_thread.join()

        # 結果を返す
        return self.vulnerable

# 使用例
krack_checker = KRACKCheck()
krack_checker.set_target_ip("192.168.1.2")
result = krack_checker.check_vulnerability()
print(f"Vulnerability Check Result: {result}")
